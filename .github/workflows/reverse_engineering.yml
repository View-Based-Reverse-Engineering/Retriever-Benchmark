name: Reverse-Engineer Case Studies

on:
  workflow_dispatch:

  # Every day at 2:00.
  schedule:
    - cron: "0 2 * * *"

permissions:
  contents: write

jobs:
  collect_info:
    runs-on: ubuntu-latest

    outputs:
      array: ${{ steps.find_directories.outputs.array }}
      latest_version: ${{ steps.latest_version.outputs.value }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find directories
        id: find_directories
        run: |
          array=$( \
            printf '[%s]' "$(find . -maxdepth 1 -type d -exec test -e "{}/.retriever.yml" ';' -printf '"%P",' | sed 's/\.\///g; s/,$//')" \
          )
          echo "array=$array" >> $GITHUB_OUTPUT

      - name: Get latest Retriever version
        id: latest_version
        run: |
          LATEST_VERSION=$(\
            curl -sL ${{ github.api_url }}/repos/PalladioSimulator/Palladio-ReverseEngineering-Retriever/releases/latest \
            | jq  -r ".tag_name"
          )
          echo "value=$LATEST_VERSION" >> $GITHUB_OUTPUT

  generate_pcm:
    runs-on: ubuntu-latest
    needs: collect_info
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.collect_info.outputs.array) }}

    steps:
      - name: Checkout benchmark repository
        uses: actions/checkout@v3
        with:
          path: benchmark

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64.tar.gz -O - \
          | tar xz && sudo mv yq_linux_amd64 /usr/bin/yq

      - name: Parse .retriever.yml
        run: |
          CONFIG_FILE="benchmark/${{ matrix.directory }}/.retriever.yml"
          echo "repository=$(yq eval '.repository' $CONFIG_FILE)" >> $GITHUB_ENV
          echo "current_version=$(yq eval '.current_version' $CONFIG_FILE)" >> $GITHUB_ENV
          echo "rules=$(yq eval '.rules[]' $CONFIG_FILE | paste -sd ",")" >> $GITHUB_ENV
          echo "benchmark=$(yq eval '.benchmark // "false"' $CONFIG_FILE)" >> $GITHUB_ENV
          echo "rules_path=$(yq eval '.rules_path // "."' $CONFIG_FILE)" >> $GITHUB_ENV

      - name: Checkout repository
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        uses: actions/checkout@v3
        with:
          path: repo/${{ matrix.directory }}
          repository: ${{ env.repository }}

      - name: Run Retriever
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        uses: PalladioSimulator/Palladio-ReverseEngineering-Retriever@main
        with:
          source_path: repo/${{ matrix.directory }}
          rules: ${{ env.rules }}
          benchmark: ${{ env.benchmark }}
          rules_path: ${{ env.rules_path }}

      - name: Download results
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        uses: actions/download-artifact@v3
        with:
          name: retriever
          path: results

      - name: Prepare upload
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        run: |
          mkdir -p to_commit/${{ matrix.directory }}/model_re/pcm
          mkdir -p to_commit/${{ matrix.directory }}/model_re/uml
          mv results/repo/${{ matrix.directory }}/*.puml to_commit/${{ matrix.directory }}/model_re/uml
          mv results/repo/${{ matrix.directory }}/*.md to_commit/${{ matrix.directory }}/model_re/
          mv results/repo/${{ matrix.directory }}/* to_commit/${{ matrix.directory }}/model_re/pcm

      - name: Render UML diagrams
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        run: |
          sudo apt-get install graphviz
          wget https://github.com/plantuml/plantuml/releases/download/v1.2023.13/plantuml-1.2023.13.jar -O plantuml.jar
          shopt -s nullglob
          for file in to_commit/${{ matrix.directory }}/model_re/uml/*.puml; do
            [ -f "$file" ] || continue
            java -jar plantuml.jar -tsvg "$file" || echo "Diagram description contains errors: ${file}"
          done

      - name: Update version
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        run: |
          yq eval -i '.current_version = "${{ needs.collect_info.outputs.latest_version }}"' "benchmark/${{ matrix.directory }}/.retriever.yml"
          mv "benchmark/${{ matrix.directory }}/.retriever.yml" to_commit/${{ matrix.directory }}/.retriever.yml

      - name: Upload artifact
        if: ${{ needs.collect_info.outputs.latest_version != env.current_version }}
        uses: actions/upload-artifact@v3
        with:
          name: to_commit
          path: to_commit

  commit_results:
    runs-on: ubuntu-latest
    needs:
      - collect_info
      - generate_pcm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: repo

      - name: Download artifact
        id: download_artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: to_commit
          path: to_commit

      - name: Integrate changes
        if: steps.download_artifact.outcome == 'success'
        run: |
          rsync -a to_commit/* repo
          cd repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Upload analysis (Retriever ${{ needs.collect_info.outputs.latest_version }})"
          git push
